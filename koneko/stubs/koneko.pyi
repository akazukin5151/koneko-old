import abc
from abc import ABC, abstractmethod
from typing import *

# current_page
JsonDict = NewType('JsonDict', Dict[str, List[Any]])
# current_page_illusts = current_page['illusts']
JsonDictPage = NewType('JsonDictPage', List[Dict[str, Any]])
# post_json = current_page_illusts[i]
PostJson = NewType('PostJson', Dict[str, Any])
# all_pages_cache = {str page_num: JsonDict current_page}
Cache = NewType('Cache', Dict[str, JsonDict])

def main() -> None: ...
def process_mode1(url_or_id: str) -> Tuple[str, str]: ...
def process_mode2(url_or_id: str) -> Tuple[str, str]: ...
def main_loop(prompted: bool, main_command: Optional[str], user_input: Optional[str], your_id: Optional[str]) -> None: ...

class Loop(ABC, metaclass=abc.ABCMeta):
    def __init__(self, prompted: bool, user_input: str) -> None: ...
    def start(self) -> None: ...

class ArtistModeLoop(Loop): ...
class ViewPostModeLoop(Loop): ...
class SearchUsersModeLoop(Loop): ...
class FollowingUserModeLoop(Loop): ...

def artist_illusts_mode(artist_user_id: int, current_page_num: int) -> None: ...
def show_gallery(artist_user_id: int, current_page_num: int, current_page: JsonDict, show: bool, all_pages_cache: Optional[Cache]) -> None: ...
def view_post_mode(image_id: int) -> None: ...
def quit() -> None: ...

class Image:
    def __init__(self, image_id: int, artist_user_id: int, current_page: Optional[JsonDict], current_page_num: int, **kwargs: Any) -> None: ...
    def open_image(self) -> None: ...
    def download_image(self) -> None: ...
    def next_image(self) -> None: ...
    def previous_image(self) -> None: ...
    def leave(self) -> None: ...

def image_prompt(image: Image) -> None: ...

class Gallery:
    def __init__(self, current_page_illusts: JsonDictPage, current_page: JsonDict, current_page_num: int, artist_user_id: int, all_pages_cache: Dict[str, List[Dict[str, str]]]) -> None: ...
    def download_image_coords(self, first_num: str, second_num: str) -> None: ...
    def open_link_coords(self, first_num: str, second_num: str) -> None: ...
    def open_link_num(self, number: int) -> None: ...
    def download_image_num(self, number: int) -> None: ...
    def view_image(self, selected_image_num: int) -> None: ...
    def next_page(self) -> None: ...
    def previous_page(self) -> None: ...

def gallery_prompt(gallery: Gallery) -> None: ...

class Users(ABC, metaclass=abc.ABCMeta):
    @abstractmethod
    def __init__(self, user_or_id: str) -> None: ...
    def start(self) -> None: ...
    def next_page(self) -> None: ...
    def previous_page(self) -> None: ...
    def go_artist_mode(self, selected_user_num: int) -> None: ...

class SearchUsers(Users):
    def __init__(self, user: str) -> None: ...

class FollowingUsers(Users):
    def __init__(self, your_id: int, publicity: str) -> None: ...

def user_prompt(user_class: Union[SearchUsers, FollowingUsers]) -> None: ...
def setup(out_queue: Any, credentials: Dict[str, str]) -> None: ...
def user_illusts_spinner(artist_user_id: int): ...
def protected_illust_detail(image_id: int): ...
def full_img_details(png: bool, post_json: Optional[PostJson], image_id: Optional[int]) -> Tuple[str, str, str]: ...
def async_download_spinner(download_path: str, urls: List[str], rename_images: bool, file_names: Optional[List[str]], pbar: Optional[Any]) -> None: ...
def async_download_core(download_path: str, urls: List[str], rename_images: bool, file_names: Optional[List[str]], pbar: Optional[Any]) -> None: ...
def protected_download(url: str) -> None: ...
def downloadr(url: str, img_name: str, new_file_name: Optional[str], pbar: Optional[Any]) -> None: ...
def download_page(current_page_illusts: JsonDictPage, current_page_num: int, artist_user_id: int, pbar: Optional[Any]) -> None: ...
def download_core(large_dir: str, url: str, filename: str, try_make_dir: bool) -> None: ...
def download_image_verified(image_id: Optional[int], post_json: Optional[PostJson], png: bool, **kwargs: Any) -> None: ...

class LastPageException(ValueError): ...

def prefetch_next_page(current_page_num: int, artist_user_id: int, all_pages_cache: Cache): ...
def go_next_image(page_urls: List[str], img_post_page_num: int, number_of_pages: int, downloaded_images: List[str], download_path: str) -> List[str]: ...
def display_image(post_json: PostJson, artist_user_id: int, number_prefix: int, current_page_num: int) -> None: ...
